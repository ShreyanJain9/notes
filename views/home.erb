<!DOCTYPE html>
<html>
<head>
  <title>Notes</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/fab/dist/mdc.fab.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/button/dist/mdc.button.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/dialog/dist/mdc.dialog.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/textfield/dist/mdc.textfield.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/fab/dist/mdc.fab.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/button/dist/mdc.button.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/dialog/dist/mdc.dialog.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/textfield/dist/mdc.textfield.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@material/list/dist/mdc.list.min.css">

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }

    h1 {
      margin-bottom: 20px;
    }

    textarea {
      width: 400px;
      height: 200px;
      margin-bottom: 10px;
    }

    button {
      padding: 10px 20px;
      margin-top: 10px;
    }    .mdc-dialog__surface {
      width: 500px;
    }
    .mdc-dialog__surface {
      width: 500px;
    }
 .mdc-dialog__surface {
      width: 500px;
    }

    .mdc-text-field--fullwidth {
      width: 100%;
    }

    .note-list {
      margin-top: 20px;
    }

    .note-item {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      padding: 10px;
      background-color: #f5f5f5;
      border-radius: 4px;
      margin-bottom: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      transition: box-shadow 0.3s ease;
    }

    .note-item:hover {
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    }

    .note-item p {
      margin: 0;
      font-size: 16px;
      line-height: 1.4;
      color: #333;
    }

    .note-item .note-actions {
      display: flex;
      align-items: center;
      margin-top: 10px;
    }

    .note-item .note-actions button {
      margin-right: 10px;
    }

    .mdc-button--accent {
      color: #fff;
      background-color: #ff4081;
    }

    .mdc-button--accent:hover {
      background-color: #f50057;
    }
  </style>
</head>
<body>
  <h1>Notes</h1>

  <div id="login-form">
    <h2>Login</h2>
    <div class="mdc-text-field mdc-text-field--fullwidth">
      <input id="username" type="text" class="mdc-text-field__input" placeholder="Username">
      <div class="mdc-line-ripple"></div>
    </div>
    <div class="mdc-text-field mdc-text-field--fullwidth">
      <input id="password" type="password" class="mdc-text-field__input" placeholder="Password">
      <div class="mdc-line-ripple"></div>
    </div>
    <button class="mdc-button mdc-button--raised" onclick="login()">Login</button>
  </div>

  <div id="note-form" style="display: none;">
    <div class="mdc-text-field mdc-text-field--fullwidth">
      <textarea id="note-content" class="mdc-text-field__input" placeholder="Enter note content"></textarea>
      <div class="mdc-line-ripple"></div>
    </div>
    <br>
    <button class="mdc-button mdc-button--raised" onclick="createNote()">Create Note</button>
  </div>
<br>
    <div id="note-list" class="note-gallery" style="display: none;">
    <% # <h2>Notes:</h2> %>
    <div id="note-items"></div>
  </div>

  <script>
    function showLoginForm() {
      document.getElementById('login-form').style.display = 'block';
      document.getElementById('note-form').style.display = 'none';
      document.getElementById('note-list').style.display = 'none';
    }

    function showNoteForm() {
      document.getElementById('login-form').style.display = 'none';
      document.getElementById('note-form').style.display = 'block';
      document.getElementById('note-list').style.display = 'block';
    }

    function setToken(token) {
      localStorage.setItem('token', token);
    }

    function getToken() {
      return localStorage.getItem('token');
    }

    function clearToken() {
      localStorage.removeItem('token');
    }

    function login() {
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;

      fetch('/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
      })
        .then(response => response.json())
        .then(data => {
          const token = data.token;
          if (token) {
            setToken(token);
            showNoteForm();
            fetchNotes();
          } else {
            alert('Login failed. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error logging in:', error);
          alert('Error logging in. Please try again.');
        });
    }

    function logout() {
      clearToken();
      showLoginForm();
    }

    function fetchNotes() {
      const token = getToken();

      if (!token) {
        showLoginForm();
        return;
      }

      fetch('/notes', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
        .then(response => response.json())
        .then(data => {
          // Update note list UI
        })
        .catch(error => {
          console.error('Error fetching notes:', error);
          alert('Error fetching notes. Please try again.');
        });
    }

function createNote() {
  const content = document.getElementById('note-content').value;
  const token = getToken();

  if (content && token) {
    fetch('/paste', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ content })
    })
      .then(response => response.json())
      .then(data => {
        console.log('Note created:', data);
        document.getElementById('note-content').value = ''; // Clear the note content field
        fetchNotes(); // Refresh the notes list
      })
      .catch(error => {
        console.error('Error creating note:', error);
        alert('Error creating note. Please try again.');
      });
  }
}


    function updateNoteList(notes) {
      const noteItems = document.getElementById('note-items');
      noteItems.innerHTML = '';

      if (notes && notes.length > 0) {
        notes.forEach(note => {
          const noteItem = document.createElement('div');
          noteItem.classList.add('note-item');
          noteItem.innerHTML = `
            <p>${note.content}</p>
            <br>
            <button onclick="editNoteModal('${note.id}', '${note.content}')">Edit</button>
            <button onclick="deleteNoteModal('${note.id}')">Delete</button>
          `;
          noteItems.appendChild(noteItem);
        });
      } else {
        noteItems.innerHTML += '<p>No notes found.</p>';
      }
    }

    function editNoteModal(noteId, noteContent) {
      const newContent = prompt('Enter the new note content:', noteContent);
      if (newContent) {
        fetch(`/notes/${noteId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${getToken()}`
          },
          body: JSON.stringify({ content: newContent })
        })
          .then(response => response.json())
          .then(data => {
            console.log('Note updated:', data);
            fetchNotes();
          })
          .catch(error => {
            console.error('Error updating note:', error);
            alert('Error updating note. Please try again.');
          });
      }
    }

    function deleteNoteModal(noteId) {
      if (confirm('Are you sure you want to delete this note?')) {
        fetch(`/notes/${noteId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${getToken()}`
          }
        })
          .then(response => response.json())
          .then(data => {
            console.log('Note deleted:', data);
            fetchNotes();
          })
          .catch(error => {
            console.error('Error deleting note:', error);
            alert('Error deleting note. Please try again.');
          });
      }
    }

    // ...

    // Update note list UI
    function fetchNotes() {
      const token = getToken();

      if (!token) {
        showLoginForm();
        return;
      }

      fetch('/notes', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
        .then(response => response.json())
        .then(data => {
          updateNoteList(data.notes);
        })
        .catch(error => {
          console.error('Error fetching notes:', error);
          alert('Error fetching notes. Please try again.');
        });
    }
    // Check if the user has a token stored
    if (getToken()) {
      showNoteForm();
      fetchNotes();
    } else {
      showLoginForm();
    }
  </script>
</body>
</html>
